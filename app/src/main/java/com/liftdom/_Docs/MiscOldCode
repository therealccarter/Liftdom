
    /**
     ArrayList<String> templateListWithNum = new ArrayList<>();
     ArrayList<String> templateNamesListSansNum = new ArrayList<>();

     File myDir = getContext().getFilesDir();
     File[] templateFiles = myDir.listFiles();

     int length = templateFiles.length;


     for(int i = 0; i < length; i++){
     templateListWithNum.add(templateFiles[i].getName());
     }

     for(String withNum : templateListWithNum){
     String sansNum = lastCharRemover(withNum);
     if(!templateNamesListSansNum.contains(sansNum) && !sansNum.equals("instant-ru") && !s3Check(sansNum)){
     templateNamesListSansNum.add(sansNum);
     }

     }

     for(String template : templateNamesListSansNum){

     TemplateListItemFrag templateListItem = new TemplateListItemFrag();

     templateListItem.templateName = template;

     FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();
     android.support.v4.app.FragmentTransaction fragmentTransaction1 = fragmentManager1.beginTransaction();
     fragmentTransaction1.add(R.id.myTemplatesList, templateListItem);
     fragmentTransaction1.addToBackStack(null);
     fragmentTransaction1.commit();

     }**/


    /**
     mTemplateRef.addValueEventListener(new ValueEventListener() {
    @Override
    public void onDataChange(DataSnapshot dataSnapshot) {
    String text = dataSnapshot.getValue(String.class);
    // text view var mConditionTextView.setText(text);
    }

    @Override
    public void onCancelled(DatabaseError databaseError) {

    }
    });

     view.setOnClickListener(new View.OnClickListener() {
     public void onClick(View v) {
     mConditionRef.setValue("Sunny");
     }
     });

     view.setOnClickListener(new View.OnClickListener() {
     public void onClick(View v) {
     mConditionRef.setValue("Foggy");
     }
     });
     **/


}

DatabaseReference feedRef = mRootRef.child("feed").child(xUid);
        Query feedQuery = feedRef.limitToLast(10);
        feedQuery.addListenerForSingleValueEvent(new ValueEventListener() {
            @Override
            public void onDataChange(DataSnapshot dataSnapshot) {
                if(!dataSnapshot.exists()){
                    loadingView.setVisibility(View.GONE);
                    noResultsView.setVisibility(View.VISIBLE);
                } else {
                    int inc = 0;
                    ArrayList<CompletedWorkoutPostFrag> postFragArrayList = new ArrayList<CompletedWorkoutPostFrag>();
                    for (DataSnapshot dataSnapshot1 : dataSnapshot.getChildren()) {

                        //CompletedWorkoutClass completedWorkoutClass = (CompletedWorkoutClass) dataSnapshot1.getValue();
                        // Could have a variable here with however many things to load, and then increase it on pull
                        // to refresh?
                        Map<String, Object> map = (Map<String, Object>) dataSnapshot1.getValue();

                        FragmentManager fragmentManager = getActivity().getSupportFragmentManager();
                        FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();

                        CompletedWorkoutPostFrag completedWorkoutPostFrag = new CompletedWorkoutPostFrag();
                        completedWorkoutPostFrag.userId = (String) map.get("userId");
                        completedWorkoutPostFrag.userName = (String) map.get("userName");
                        completedWorkoutPostFrag.publicComment = (String) map.get("publicComment");
                        completedWorkoutPostFrag.workoutInfoList = (List) map.get("workoutInfoList");
                        completedWorkoutPostFrag.dateAndTime = (String) map.get("dateTime");
                        completedWorkoutPostFrag.repsMap = (HashMap<String, Boolean>) map.get("repsMap");

                        postFragArrayList.add(completedWorkoutPostFrag);

                        //fragmentTransaction.add(R.id.postsHolder, completedWorkoutPostFrag);
                        //fragmentTransaction.commit();

                        inc++;
                        if(inc == dataSnapshot.getChildrenCount()){

                            loadingView.setVisibility(View.GONE);

                            Collections.reverse(postFragArrayList);

                            for(CompletedWorkoutPostFrag completedWorkoutPost : postFragArrayList){
                                fragmentTransaction.add(R.id.postsHolder, completedWorkoutPost);
                            }

                            fragmentTransaction.commit();
                        }
                    }
                }
            }

            @Override
            public void onCancelled(DatabaseError databaseError) {

            }
        });





         // first, the OTHER person gains YOU as a follower
                        final DatabaseReference otherFollowerRef = mRootRef.child("followers").child(xUid);
                        otherFollowerRef.addListenerForSingleValueEvent(new ValueEventListener() {
                            @Override
                            public void onDataChange(DataSnapshot dataSnapshot) {
                                if(dataSnapshot.exists()){
                                    SharedPreferences sharedPref = getActivity().getSharedPreferences("prefs", Activity.MODE_PRIVATE);
                                    FollowersModelClass followersModelClass = dataSnapshot.getValue(FollowersModelClass.class);
                                    followersModelClass.addFollowerToMap(uid, sharedPref.getString("userName", "loading..."));
                                    otherFollowerRef.setValue(followersModelClass).addOnCompleteListener(new OnCompleteListener<Void>() {
                                        @Override
                                        public void onComplete(@NonNull Task<Void> task) {
                                            // second, YOU gain the OTHER person as "following"
                                            final DatabaseReference myFollowingList = mRootRef.child("following").child(uid);
                                            myFollowingList.addListenerForSingleValueEvent(new ValueEventListener() {
                                                @Override
                                                public void onDataChange(DataSnapshot dataSnapshot) {
                                                    if(dataSnapshot.exists()){
                                                        FollowingModelClass followingModelClass = dataSnapshot.getValue(FollowingModelClass.class);
                                                        followingModelClass.addFollowingToMap(xUid, userName);
                                                        myFollowingList.setValue(followingModelClass).addOnCompleteListener(new OnCompleteListener<Void>() {
                                                            @Override
                                                            public void onComplete(@NonNull Task<Void> task) {
                                                                followUserButton.setVisibility(View.GONE);
                                                                unfollowUserButton.setVisibility(View.VISIBLE);
                                                            }
                                                        });
                                                    }else{
                                                        FollowingModelClass followingModelClass = new FollowingModelClass(xUid, userName);
                                                        myFollowingList.setValue(followingModelClass).addOnCompleteListener(new OnCompleteListener<Void>() {
                                                            @Override
                                                            public void onComplete(@NonNull Task<Void> task) {
                                                                followUserButton.setVisibility(View.GONE);
                                                                unfollowUserButton.setVisibility(View.VISIBLE);
                                                            }
                                                        });
                                                    }
                                                }

                                                @Override
                                                public void onCancelled(DatabaseError databaseError) {

                                                }
                                            });
                                        }
                                    });
                                }else{
                                    SharedPreferences sharedPref = getActivity().getSharedPreferences("prefs", Activity.MODE_PRIVATE);
                                    FollowersModelClass followersModelClass = new FollowersModelClass(uid, sharedPref.getString("userName", "loading..."));
                                    otherFollowerRef.setValue(followersModelClass).addOnCompleteListener(new OnCompleteListener<Void>() {
                                        @Override
                                        public void onComplete(@NonNull Task<Void> task) {
                                            // second, YOU gain the OTHER person as "following"
                                            final DatabaseReference myFollowingList = mRootRef.child("following").child(uid);
                                            myFollowingList.addListenerForSingleValueEvent(new ValueEventListener() {
                                                @Override
                                                public void onDataChange(DataSnapshot dataSnapshot) {
                                                    if(dataSnapshot.exists()){
                                                        FollowingModelClass followingModelClass = dataSnapshot.getValue(FollowingModelClass.class);
                                                        followingModelClass.addFollowingToMap(xUid, userName);
                                                        myFollowingList.setValue(followingModelClass).addOnCompleteListener(new OnCompleteListener<Void>() {
                                                            @Override
                                                            public void onComplete(@NonNull Task<Void> task) {
                                                                followUserButton.setVisibility(View.GONE);
                                                                unfollowUserButton.setVisibility(View.VISIBLE);
                                                            }
                                                        });
                                                    }else{
                                                        FollowingModelClass followingModelClass = new FollowingModelClass(xUid, userName);
                                                        myFollowingList.setValue(followingModelClass).addOnCompleteListener(new OnCompleteListener<Void>() {
                                                            @Override
                                                            public void onComplete(@NonNull Task<Void> task) {
                                                                followUserButton.setVisibility(View.GONE);
                                                                unfollowUserButton.setVisibility(View.VISIBLE);
                                                            }
                                                        });
                                                    }
                                                }

                                                @Override
                                                public void onCancelled(DatabaseError databaseError) {

                                                }
                                            });
                                        }
                                    });
                                }
                            }

                            @Override
                            public void onCancelled(DatabaseError databaseError) {

                            }
                        });

                        followingUsersRef.child(xUid).child(uid).setValue(null).addOnCompleteListener(new OnCompleteListener<Void>() {
                                            @Override
                                            public void onComplete(@NonNull Task<Void> task) {
                                                followerUsersRef.child(uid).child(xUid).setValue(null).addOnCompleteListener(new OnCompleteListener<Void>() {
                                                    @Override
                                                    public void onComplete(@NonNull Task<Void> task) {
                                                        unfollowUserButton.setVisibility(View.GONE);
                                                        followUserButton.setVisibility(View.VISIBLE);
                                                    }
                                                });
                                            }
                                        });