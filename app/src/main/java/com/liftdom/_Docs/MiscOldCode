

uid3 = FirebaseAuth.getInstance().getCurrentUser().getUid();
userRef1 = FirebaseDatabase.getInstance().getReference().child("user").child(uid3);
userRefListener = userRef1.addValueEventListener(new ValueEventListener() {
private ValueEventListener userRefListener;
String uid3;
DatabaseReference userRef1;

{
  "rules": {
    "user": {
      "$uid": {
        ".read": "$uid === auth.uid",
        ".write": "$uid === auth.uid"
      }
    },
    "chatGroups": {
      "$uid": {
        ".read": "$uid === auth.uid",
        ".write": "$uid === auth.uid"
      }
    },
    "completedExercises": {
      "$uid": {
        ".read": "$uid === auth.uid",
        ".write": "$uid === auth.uid"
      }
    },
    "customExercises": {
      "$uid": {
        ".read": "$uid === auth.uid",
        ".write": "$uid === auth.uid"
      }
    },
    "chats": {
        ".read": "auth != null",
        ".write": "auth != null"
    },
    "defaultTemplates": {
      ".read": "auth != null",
    },
    "feed": {
        ".read": "auth != null",
        ".write": "auth != null"
    },
    "feedbackChat": {
        ".read": "auth != null",
        ".write": "auth != null"
    },
    "feedbackChatMaster": {
        ".read": "auth != null",
        ".write": "auth != null"
    },
    "firstTime": {
      "$uid": {
        ".read": "$uid === auth.uid",
        ".write": "$uid === auth.uid"
      }
    },
    "followers": {
        ".read": "auth != null",
        ".write": "auth != null"
    },
    "following": {
        ".read": "auth != null",
        ".write": "auth != null"
    },
    "globalFeed": {
        ".read": "auth != null",
        ".write": "auth != null"
    },
    "loginDate": {
      "$uid": {
        ".read": "$uid === auth.uid",
        ".write": "$uid === auth.uid"
      }
    },
    "mainFeedBanner": {
      "$uid": {
        ".read": "$uid === auth.uid",
        ".write": "$uid === auth.uid"
      }
    },
    "maxes": {
      "$uid": {
        ".read": "$uid === auth.uid",
        ".write": "$uid === auth.uid"
      }
    },
    "notifications": {
      ".read": "auth != null",
      ".write": "auth != null"
    },
    "publicTemplates": {
      ".read": "auth != null",
      ".write": "auth != null"
    },
    "runningAssistor": {
      "$uid": {
        ".read": "$uid === auth.uid",
        ".write": "$uid === auth.uid"
      }
    },
    "selfFeed": {
        ".read": "auth != null",
        ".write": "auth != null"
    },
    "templates": {
      "$uid": {
        ".read": "$uid === auth.uid",
        ".write": "$uid === auth.uid"
      }
    },
    "templatesInbox": {
        ".read": "auth != null",
        ".write": "auth != null"
    },
    "userList": {
      "$uid": {
        ".read": "$uid === auth.uid",
        ".write": "$uid === auth.uid"
      }
    },
    "userNames": {
        ".read": "auth != null",
        ".write": "auth != null"
    },
    "versionCheck": {
      "$uid": {
        ".read": "$uid === auth.uid",
        ".write": "$uid === auth.uid"
      }
    },
    "workoutHistory": {
      "$uid": {
        ".read": "$uid === auth.uid",
        ".write": "$uid === auth.uid"
      }
    }
  }
}

    - Now, how do we do that?
        - Disconnect UI from being updated automatically from FB.
            - problem now is it doesn't get updates from service
        - Need a check if exInfoHashMap is null, if it is, remake the original.


    - best option might be to just work on detaching ui from live updates
        then somehow use the firebase offline to enable offline. or manually use Paper.
        will need to have template ref for offline as well as running assistor
    - this was still assuming that we have connection for the initial read of
        the workout history/template/running assistor. Once we have the relevant data
        we simply detach the modifications from updating, and the listener from updating things.

    - first we need our templates saved to disk
    - then we need to do the whole checking process of WA/AH in disk
    - which means we need to have RunningAssistor in disk
    - Maybe can help stop some of the finnicky ness of the WA and it's relation to states
WA/main service/template creation and saving/ whole process needs to be self contained offline
    - going to have to use Room or equivalent. Massive undertaking.

//if(getExInfoHashMap().get(tokens[0] + key).size() > (Integer.parseInt(tokens[1]) + 1)){
                        //    // if room to increase ([1])
                        //    //Log.i("progressModel", "107, cursor = " + cursor);
                        //    int addedKey = Integer.parseInt(tokens[1]) + 1;
                        //    if(getExInfoHashMap().get(tokens[0] + key).get(String.valueOf(addedKey) + key).size() > Integer
                        //            .parseInt(tokens[2])){
                        //        // if room to increase ([2]) of next list
                        //        //int newValue = Integer.parseInt(tokens[1]) + 1;
                        //        //Log.i("progressModel", "111, cursor = " + cursor);
                        //        setViewCursor(tokens[0] + "_" + String.valueOf(addedKey) + "_" + tokens[2]);
                        //    }else{
                        //        //Log.i("progressModel", "116, cursor = " + cursor);
                        //        // keep increasing in original?
                        //        if(getExInfoHashMap().get(tokens[0] + key).get(tokens[1] + key).size() > (Integer.parseInt
                        //                (tokens[2]) + 1)){
                        //            // increase
                        //            //Log.i("progressModel", "121, cursor = " + cursor);
                        //            int newValue = Integer.parseInt(tokens[2]) + 1;
                        //            setViewCursor(tokens[0] + "_" + tokens[1] + "_" + String.valueOf(newValue));
                        //        }else{
                        //            // move forward
                        //            int newValue = Integer.parseInt(tokens[0]) + 1;
                        //            if(getExInfoHashMap().size() >= newValue){
                        //                // next map
                        //                setViewCursor(String.valueOf(newValue) + "_0_1");
                        //                //Log.i("progressModel", "126, cursor = " + cursor);
                        //                //Log.i("progressModel", "move forward (superset - else end 1)");
                        //            }else{
                        //                // done with workout
                        //                //setViewCursor("workoutDone");
                        //            }
                        //        }
                        //    }
                        //}else{
                        //    // if need to loop back
                        //    int newValue = Integer.parseInt(tokens[2]) + 1;
//
                        //    if(getExInfoHashMap().get(tokens[0] + key).get("0_key").size() > newValue){
                        //        // increase
                        //        //Log.i("progressModel", "138, cursor = " + cursor);
                        //        setViewCursor(tokens[0] + "_0_" + String.valueOf(newValue));
                        //    }else{
                        //        // move forward
                        //        //Log.i("progressModel", "142, cursor = " + cursor);
                        //        //Log.i("progressModel", "move forward (superset - else end 2)");
                        //    }
                        //}

DatabaseReference feedRef = mRootRef.child("feed").child(xUid);
        Query feedQuery = feedRef.limitToLast(10);
        feedQuery.addListenerForSingleValueEvent(new ValueEventListener() {
            @Override
            public void onDataChange(DataSnapshot dataSnapshot) {
                if(!dataSnapshot.exists()){
                    loadingView.setVisibility(View.GONE);
                    noResultsView.setVisibility(View.VISIBLE);
                } else {
                    int inc = 0;
                    ArrayList<CompletedWorkoutPostFrag> postFragArrayList = new ArrayList<CompletedWorkoutPostFrag>();
                    for (DataSnapshot dataSnapshot1 : dataSnapshot.getChildren()) {

                        //CompletedWorkoutClass completedWorkoutClass = (CompletedWorkoutClass) dataSnapshot1.getValue();
                        // Could have a variable here with however many things to load, and then increase it on pull
                        // to refresh?
                        Map<String, Object> map = (Map<String, Object>) dataSnapshot1.getValue();

                        FragmentManager fragmentManager = getActivity().getSupportFragmentManager();
                        FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();

                        CompletedWorkoutPostFrag completedWorkoutPostFrag = new CompletedWorkoutPostFrag();
                        completedWorkoutPostFrag.userId = (String) map.get("userId");
                        completedWorkoutPostFrag.userName = (String) map.get("userName");
                        completedWorkoutPostFrag.publicComment = (String) map.get("publicComment");
                        completedWorkoutPostFrag.workoutInfoList = (List) map.get("workoutInfoList");
                        completedWorkoutPostFrag.dateAndTime = (String) map.get("dateTime");
                        completedWorkoutPostFrag.repsMap = (HashMap<String, Boolean>) map.get("repsMap");

                        postFragArrayList.add(completedWorkoutPostFrag);

                        //fragmentTransaction.add(R.id.postsHolder, completedWorkoutPostFrag);
                        //fragmentTransaction.commit();

                        inc++;
                        if(inc == dataSnapshot.getChildrenCount()){

                            loadingView.setVisibility(View.GONE);

                            Collections.reverse(postFragArrayList);

                            for(CompletedWorkoutPostFrag completedWorkoutPost : postFragArrayList){
                                fragmentTransaction.add(R.id.postsHolder, completedWorkoutPost);
                            }

                            fragmentTransaction.commit();
                        }
                    }
                }
            }

            @Override
            public void onCancelled(DatabaseError databaseError) {

            }
        });





         // first, the OTHER person gains YOU as a follower
                        final DatabaseReference otherFollowerRef = mRootRef.child("followers").child(xUid);
                        otherFollowerRef.addListenerForSingleValueEvent(new ValueEventListener() {
                            @Override
                            public void onDataChange(DataSnapshot dataSnapshot) {
                                if(dataSnapshot.exists()){
                                    SharedPreferences sharedPref = getActivity().getSharedPreferences("prefs", Activity.MODE_PRIVATE);
                                    FollowersModelClass followersModelClass = dataSnapshot.getValue(FollowersModelClass.class);
                                    followersModelClass.addFollowerToMap(uid, sharedPref.getString("userName", "loading..."));
                                    otherFollowerRef.setValue(followersModelClass).addOnCompleteListener(new OnCompleteListener<Void>() {
                                        @Override
                                        public void onComplete(@NonNull Task<Void> task) {
                                            // second, YOU gain the OTHER person as "following"
                                            final DatabaseReference myFollowingList = mRootRef.child("following").child(uid);
                                            myFollowingList.addListenerForSingleValueEvent(new ValueEventListener() {
                                                @Override
                                                public void onDataChange(DataSnapshot dataSnapshot) {
                                                    if(dataSnapshot.exists()){
                                                        FollowingModelClass followingModelClass = dataSnapshot.getValue(FollowingModelClass.class);
                                                        followingModelClass.addFollowingToMap(xUid, userName);
                                                        myFollowingList.setValue(followingModelClass).addOnCompleteListener(new OnCompleteListener<Void>() {
                                                            @Override
                                                            public void onComplete(@NonNull Task<Void> task) {
                                                                followUserButton.setVisibility(View.GONE);
                                                                unfollowUserButton.setVisibility(View.VISIBLE);
                                                            }
                                                        });
                                                    }else{
                                                        FollowingModelClass followingModelClass = new FollowingModelClass(xUid, userName);
                                                        myFollowingList.setValue(followingModelClass).addOnCompleteListener(new OnCompleteListener<Void>() {
                                                            @Override
                                                            public void onComplete(@NonNull Task<Void> task) {
                                                                followUserButton.setVisibility(View.GONE);
                                                                unfollowUserButton.setVisibility(View.VISIBLE);
                                                            }
                                                        });
                                                    }
                                                }

                                                @Override
                                                public void onCancelled(DatabaseError databaseError) {

                                                }
                                            });
                                        }
                                    });
                                }else{
                                    SharedPreferences sharedPref = getActivity().getSharedPreferences("prefs", Activity.MODE_PRIVATE);
                                    FollowersModelClass followersModelClass = new FollowersModelClass(uid, sharedPref.getString("userName", "loading..."));
                                    otherFollowerRef.setValue(followersModelClass).addOnCompleteListener(new OnCompleteListener<Void>() {
                                        @Override
                                        public void onComplete(@NonNull Task<Void> task) {
                                            // second, YOU gain the OTHER person as "following"
                                            final DatabaseReference myFollowingList = mRootRef.child("following").child(uid);
                                            myFollowingList.addListenerForSingleValueEvent(new ValueEventListener() {
                                                @Override
                                                public void onDataChange(DataSnapshot dataSnapshot) {
                                                    if(dataSnapshot.exists()){
                                                        FollowingModelClass followingModelClass = dataSnapshot.getValue(FollowingModelClass.class);
                                                        followingModelClass.addFollowingToMap(xUid, userName);
                                                        myFollowingList.setValue(followingModelClass).addOnCompleteListener(new OnCompleteListener<Void>() {
                                                            @Override
                                                            public void onComplete(@NonNull Task<Void> task) {
                                                                followUserButton.setVisibility(View.GONE);
                                                                unfollowUserButton.setVisibility(View.VISIBLE);
                                                            }
                                                        });
                                                    }else{
                                                        FollowingModelClass followingModelClass = new FollowingModelClass(xUid, userName);
                                                        myFollowingList.setValue(followingModelClass).addOnCompleteListener(new OnCompleteListener<Void>() {
                                                            @Override
                                                            public void onComplete(@NonNull Task<Void> task) {
                                                                followUserButton.setVisibility(View.GONE);
                                                                unfollowUserButton.setVisibility(View.VISIBLE);
                                                            }
                                                        });
                                                    }
                                                }

                                                @Override
                                                public void onCancelled(DatabaseError databaseError) {

                                                }
                                            });
                                        }
                                    });
                                }
                            }

                            @Override
                            public void onCancelled(DatabaseError databaseError) {

                            }
                        });

                        followingUsersRef.child(xUid).child(uid).setValue(null).addOnCompleteListener(new OnCompleteListener<Void>() {
                                            @Override
                                            public void onComplete(@NonNull Task<Void> task) {
                                                followerUsersRef.child(uid).child(xUid).setValue(null).addOnCompleteListener(new OnCompleteListener<Void>() {
                                                    @Override
                                                    public void onComplete(@NonNull Task<Void> task) {
                                                        unfollowUserButton.setVisibility(View.GONE);
                                                        followUserButton.setVisibility(View.VISIBLE);
                                                    }
                                                });
                                            }
                                        });

// removes all the incompatible workouts in global feed based on date
        //final DatabaseReference globalRef = FirebaseDatabase.getInstance().getReference().child("globalFeed");
        //globalRef.addListenerForSingleValueEvent(new ValueEventListener() {
        //    @Override
        //    public void onDataChange(DataSnapshot dataSnapshot) {
        //        for (DataSnapshot dataSnapshot1 : dataSnapshot.getChildren()) {
        //            DateTime dateTime1 = DateTime.parse("2017-12-02");
        //            CompletedWorkoutModelClass workoutModelClass = dataSnapshot1.getValue(CompletedWorkoutModelClass
        //                    .class);
        //            DateTime dateTime2 = DateTime.parse(workoutModelClass.getDateTime());
        //            if(dateTime2.isBefore(dateTime1)){
        //                globalRef.child(workoutModelClass.getRef()).setValue(null);
        //            }
        //        }
        //    }
//
        //    @Override
        //    public void onCancelled(DatabaseError databaseError) {
//
        //    }
        //});

        // current issue is that mExInfoHasMap is being set to null after saving a revised workout.
        //DatabaseReference myRef = FirebaseDatabase.getInstance().getReference().child("runningAssistor")
        //        .child(uid).child("assistorModel").child("exInfoHashMap");
        //HashMap<String, HashMap<String, List<String>>> mExInfoHashMap = new HashMap<>();
        //List<String> list1 = new ArrayList<>();
        //List<String> list2 = new ArrayList<>();
        //list1.add("Deadlift (Barbell - Conventional)");
        //list1.add("4@25_checked");
        //list1.add("4@25_checked");
        //list1.add("4@25_unchecked");
        //list2.add("Bench Press (Barbell - Flat)");
        //list2.add("3@58_checked_ss");
        //list2.add("3@58_checked_ss");
        //list2.add("3@58_unchecked_ss");
        //list2.add("3@58_unchecked_ss");
        //HashMap<String, List<String>> map = new HashMap<>();
        //map.put("0_key", list1);
        //map.put("1_key", list2);
        //mExInfoHashMap.put("1_key", map);
        //myRef.setValue(mExInfoHashMap);

        // updates <1.29 posts to the global feed
        //DatabaseReference selfFeedRef = FirebaseDatabase.getInstance().getReference().child("selfFeed");
        //selfFeedRef.addListenerForSingleValueEvent(new ValueEventListener() {
        //    @Override
        //    public void onDataChange(DataSnapshot dataSnapshot) {
        //        Map fanoutObject = new HashMap<>();
        //        int index1 = 0;
        //        int index2 = 0;
        //        for(DataSnapshot dataSnapshot1 : dataSnapshot.getChildren()){
        //            index1++;
        //            index2 = 0;
        //            for(DataSnapshot dataSnapshot2 : dataSnapshot1.getChildren()){
        //                index2++;
        //                fanoutObject.put("/globalFeed/" + dataSnapshot2.getKey(), dataSnapshot2.getValue());
        //                if(index1 == dataSnapshot.getChildrenCount()){
        //                    if(index2 == dataSnapshot1.getChildrenCount()){
        //                        DatabaseReference rootRef = FirebaseDatabase.getInstance().getReference();
        //                        rootRef.updateChildren(fanoutObject);
        //                    }
        //                }
        //            }
        //        }
        //    }
//
        //    @Override
        //    public void onCancelled(DatabaseError databaseError) {
//
        //    }
        //});

        //DatabaseReference burkRef = FirebaseDatabase.getInstance().getReference().child("templates").child
        //        ("EcCB9ayXcegCctEaT1Y7n98NC5G2").child("MindPrimary");
        //burkRef.addListenerForSingleValueEvent(new ValueEventListener() {
        //    @Override
        //    public void onDataChange(DataSnapshot dataSnapshot) {
        //        TemplateModelClass templateModelClass = dataSnapshot.getValue(TemplateModelClass.class);
        //        templateModelClass.setUserName2("Brodin");
        //        templateModelClass.setUserId2(uid);
        //        DatabaseReference myRef = FirebaseDatabase.getInstance().getReference().child("templatesInbox").child
        //                (uid).child("MindPrimary");
        //        myRef.setValue(templateModelClass);
        //    }
//
        //    @Override
        //    public void onCancelled(DatabaseError databaseError) {
//
        //    }
        //});

        //firebaseAdapter = new FirebaseRecyclerAdapter<CompletedWorkoutModelClass, CompletedWorkoutViewHolder>
        //        (CompletedWorkoutModelClass.class, R.layout.completed_workout_list_item2,
        //                CompletedWorkoutViewHolder.class, databaseReference) {
        //    @Override
        //    protected void populateViewHolder(CompletedWorkoutViewHolder viewHolder,
        //                                      CompletedWorkoutModelClass model, int position) {
        //        //if(model.getUserId().equals(uid)){
        //        //viewHolder.setPosition(position);
//
        //        /**
        //         * Going to try the new FirebaseUI version. Or at least see if we're on the old version.
        //         */
//
        //        viewHolder.setCurrentUserId(uid);
        //        viewHolder.setImperialPOV(isImperial);
        //        viewHolder.setActivity(getActivity());
        //        viewHolder.setRefKey(model.getRef());
        //        viewHolder.setUserId(model.getUserId());
        //        viewHolder.setPostInfo(model.getWorkoutInfoMap(), getActivity(), getContext(),
        //                model.isIsImperial());
        //        viewHolder.setUpProfilePics(model.getUserId());
        //        viewHolder.setCommentRecycler(model.getRef());
        //        viewHolder.setUserName(model.getUserName());
        //        viewHolder.setUserLevel(model.getUserId(), rootRef);
        //        viewHolder.setPublicDescription(model.getPublicDescription());
        //        viewHolder.setTimeStamp(model.getDateTime());
        //        //viewHolder.setReppedCount(model.getRepCount());
        //        viewHolder.setHasReppedList(model.getHasReppedList());
        //        //viewHolder.setRepsCounterView(model.getRepCount());
        //        //viewHolder.setIsRepped(model.isHasRepped(), false);
        //        //viewHolder.setActivity(getActivity());
        //        //if(model.getBonusList() != null){
        //        try{
        //            viewHolder.mBonusView.setText(model.getBonusList().get(0));
        //        }catch (NullPointerException e){
//
        //        }
//
        //        //viewHolder.setBonusView(model.getBonusList());
        //        //}
        //        //}else{
        //        //    viewHolder.hideLayout();
        //        //}
//
//
        //    }
        //};


/**
* So what're the cases where this would
* fuck up?
* 1. If sets/reps are not set to increase.
* 2. If sets - wSL < 1 || reps - wSL < 1
*
* idk
*
* Let's write out some cases.
*
* ---------------------------------------
* 1 x 2 @ 30 (OG set scheme)
* ---------------------------------------
* s = 1_1 (every 1 weeks, increase s by 1)
* r = 2_1 (every 2 weeks, increase r by 1)
* w = 3_1 (every 3 weeks, increase w by 1)
* ----------------------------------------
*
* wSL = 1
* 2 x 2 @ 30
*
* wSL = 2
* 3 x 3 @ 30
*
* wSL = 3
* 4 x 3 @ 31
*
* wSL = 4 (now it's above w so we loop
* (wSL - 1) times)
* (loop 1){
*      s = 4 - 1 // s == 3
*      r = 3 - 1 // r == 2
* }
* (loop 2){
*      s = 3 - 1 // s == 2
* }
* (loop 3){
*      s = 2 - 1 // s == 1
* }
* 1 x 2 @ 31 | what we actually got: 2 x 2 @ 31
*
* this is bc we're increasing s/r
* before checking for the loop
*
* we're going to have to apply the %
* method to the weight thing
*/

/**
     ArrayList<String> templateListWithNum = new ArrayList<>();
     ArrayList<String> templateNamesListSansNum = new ArrayList<>();

     File myDir = getContext().getFilesDir();
     File[] templateFiles = myDir.listFiles();

     int length = templateFiles.length;


     for(int i = 0; i < length; i++){
     templateListWithNum.add(templateFiles[i].getName());
     }

     for(String withNum : templateListWithNum){
     String sansNum = lastCharRemover(withNum);
     if(!templateNamesListSansNum.contains(sansNum) && !sansNum.equals("instant-ru") && !s3Check(sansNum)){
     templateNamesListSansNum.add(sansNum);
     }

     }

     for(String template : templateNamesListSansNum){

     TemplateListItemFrag templateListItem = new TemplateListItemFrag();

     templateListItem.templateName = template;

     FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();
     androidx.fragment.app.FragmentTransaction fragmentTransaction1 = fragmentManager1.beginTransaction();
     fragmentTransaction1.add(R.id.myTemplatesList, templateListItem);
     fragmentTransaction1.addToBackStack(null);
     fragmentTransaction1.commit();

     }**/


    /**
     mTemplateRef.addValueEventListener(new ValueEventListener() {
    @Override
    public void onDataChange(DataSnapshot dataSnapshot) {
    String text = dataSnapshot.getValue(String.class);
    // text view var mConditionTextView.setText(text);
    }

    @Override
    public void onCancelled(DatabaseError databaseError) {

    }
    });

     view.setOnClickListener(new View.OnClickListener() {
     public void onClick(View v) {
     mConditionRef.setValue("Sunny");
     }
     });

     view.setOnClickListener(new View.OnClickListener() {
     public void onClick(View v) {
     mConditionRef.setValue("Foggy");
     }
     });
     **/


}